'use strict';

var http = require('http');

/*
  ======== A Handy Little Nodeunit Reference ========
  https://github.com/caolan/nodeunit

  Test methods:
    test.expect(numAssertions)
    test.done()
  Test assertions:
    test.ok(value, [message])
    test.equal(actual, expected, [message])
    test.notEqual(actual, expected, [message])
    test.deepEqual(actual, expected, [message])
    test.notDeepEqual(actual, expected, [message])
    test.strictEqual(actual, expected, [message])
    test.notStrictEqual(actual, expected, [message])
    test.throws(block, [error], [message])
    test.doesNotThrow(block, [error], [message])
    test.ifError(value)
*/

function testAdvancedFormatPost(test, path, body, expectedStatus, expectedMessage, failMessage) {
    test.expect(3);
    var req = http.request({
        path: path,
        method: 'POST',
        headers: {
            'Content-Type': 'application/json;charset=UTF-8'
        },
        port: 8080
    }, function(response) {
        var data = '';
        response.on('data', function(chunk) {
            data += chunk;
        });
        response.on('end', function() {
            test.equal(response.statusCode, expectedStatus);
            test.equal(response.headers['content-type'], 'application/json;charset=UTF-8');
            var responseBody = JSON.parse(data);
            test.equal(responseBody.message, expectedMessage, failMessage);
            test.done();
        });
    });
    req.write(body);
    req.end();
}

exports.connect_apimock = {
    setUp: function(done) {
        // setup here if necessary
        done();
    },



    bodyparameter_first_match: function(test) {
        testAdvancedFormatPost(test,
            '/api/advanced/bodyparameter',
            '{"foo":"foo"}',
            402,
            'foo',
            'Should return the response for the first bodyparamter match');
    },
    bodyparameter_second_match: function(test) {
        testAdvancedFormatPost(test,
            '/api/advanced/bodyparameter',
            '{"foo":"bar"}',
            200,
            'bar',
            'Should return the response for the second bodyparameter match');
    },
    bodyparameter_no_match_parameter_value: function(test) {
        testAdvancedFormatPost(test,
            '/api/advanced/bodyparameter',
            '{"foo":"asdf"}',
            201,
            'foofoofoo',
            'No match in bodyparameter value. Should return the default response');
    },
    bodyparameter_no_match_parameter_name: function(test) {
        testAdvancedFormatPost(test,
            '/api/advanced/bodyparameter',
            '{"bar":"asdf"}',
            201,
            'foofoofoo',
            'No match in bodyparameter name. Should return the default response');
    },
    bodyparameter_no_defaultresponse_no_match: function(test) {
        test.expect(3);
        var req = http.request({
            path: '/api/advanced/bodyparameter_no_defaultresponse',
            method: 'POST',
            headers: {
                'Content-Type': 'application/json;charset=UTF-8'
            },
            port: 8080
        }, function(response) {
            var data = '';
            response.on('data', function(chunk) {
                data += chunk;
            });
            response.on('end', function() {
                test.equal(response.statusCode, 500);
                test.equal(response.headers['content-type'], 'application/json;charset=UTF-8');
                var expected = '{"error":"No response could be found"}';
                test.equal(data, expected, 'No match and no default response. Should return an error');
                test.done();
            });
        });
        req.write('{"foo":"asdf"}');
        req.end();
    },
    bodyparameter_no_parameters: function(test) {
        testAdvancedFormatPost(test,
            '/api/advanced/bodyparameter_no_parameters',
            '{"foo":"bar"}',
            201,
            'foofoofoo',
            'No bodyparameters in mockfile. Should return the default response');
    },


    bodyparameter_complexbody_level2_2parameters: function(test) {
        testAdvancedFormatPost(test,
            '/api/advanced/bodyparameter_complex_body',
            '{"user":{"firstname":"Luke","lastname":"Skywalker","address":{"street":"Milkyway","zipcode":"12345"}}, "foo":"foo"}',
            500,
            'Level 2. Firstname and lastname matches',
            'Should match two parameters on second level');
    },
    bodyparameter_complexbody_level2_1parameter: function(test) {
        testAdvancedFormatPost(test,
            '/api/advanced/bodyparameter_complex_body',
            '{"user":{"firstname":"Luke","lastname":"Macahan","address":{"street":"Milkyway","zipcode":"12345"}}, "foo":"foo"}',
            501,
            'Level 2. Firstname matches',
            'Should match one parameter on second level');
    },
    bodyparameter_complexbody_level3_1parameter: function(test) {
        testAdvancedFormatPost(test,
            '/api/advanced/bodyparameter_complex_body',
            '{"user":{"firstname":"Zeb","lastname":"Macahan","address":{"street":"The wild west","zipcode":"55555"}}, "foo":"foo"}',
            502,
            'Level 3. zipcode matches',
            'Should match one parameter on third level');
    },
    bodyparameter_complexbody_level1_1parameter: function(test) {
        testAdvancedFormatPost(test,
            '/api/advanced/bodyparameter_complex_body',
            '{"user":{"firstname":"Zeb","lastname":"Macahan","address":{"street":"The wild west","zipcode":"12345"}}, "foo":"bar"}',
            503,
            'Level 1. foo matches',
            'Should match one parameter on first level');
    },
    bodyparameter_complexbody_level1_subset_parameters: function(test) {
        testAdvancedFormatPost(test,
            '/api/advanced/bodyparameter_complex_body',
            '{"foo":"bar"}',
            503,
            'Level 1. foo matches',
            'Should handle a request that do not contain all of the mock parameters');
    },
    bodyparameter_complexbody_no_match: function(test) {
        testAdvancedFormatPost(test,
            '/api/advanced/bodyparameter_complex_body',
            '{"asdf":"asdf"}',
            201,
            'No match, default response',
            'No match, should return the default answer');
    },


    bodyparameters_one_of_two_matches: function(test) {
        testAdvancedFormatPost(test,
            '/api/advanced/bodyparameters',
            '{"foo":"bar"}',
            201,
            'foofoofoo',
            'Only one of two bodyparameters matches. Should return the default answer');
    },
    bodyparameters_both_matches: function(test) {
        testAdvancedFormatPost(test,
            '/api/advanced/bodyparameters',
            '{"foo":"bar","bar":"foo"}',
            403,
            'foobar',
            'Should return the answer for both bodyparameters match');
    },




    requestparameter_bodyparameter_request_match: function(test) {
        testAdvancedFormatPost(test,
            '/api/advanced/requestparameter_bodyparameter?foo=bar',
            '{"asdf":"asdf"}',
            201,
            'foofoofoo',
            'Only the requestparameter matches. Should return the default answer');
    },
    requestparameter_bodyparameter_body_match: function(test) {
        testAdvancedFormatPost(test,
            '/api/advanced/requestparameter_bodyparameter?asdf=asdf',
            '{"bar":"foo"}',
            201,
            'foofoofoo',
            'Only the bodyparameter matches. Should return the default answer');
    },
    requestparameter_bodyparameter_both_match: function(test) {
        testAdvancedFormatPost(test,
            '/api/advanced/requestparameter_bodyparameter?foo=bar',
            '{"bar":"foo"}',
            404,
            'foobar',
            'Should return the answer for requestparameter and bodyparameter match');
    }

};
