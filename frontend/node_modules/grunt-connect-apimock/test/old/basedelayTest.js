'use strict';

var http = require('http');

/*
  ======== A Handy Little Nodeunit Reference ========
  https://github.com/caolan/nodeunit

  Test methods:
    test.expect(numAssertions)
    test.done()
  Test assertions:
    test.ok(value, [message])
    test.equal(actual, expected, [message])
    test.notEqual(actual, expected, [message])
    test.deepEqual(actual, expected, [message])
    test.notDeepEqual(actual, expected, [message])
    test.strictEqual(actual, expected, [message])
    test.notStrictEqual(actual, expected, [message])
    test.throws(block, [error], [message])
    test.doesNotThrow(block, [error], [message])
    test.ifError(value)
*/

var DELAY_TIME = 1000;

exports.connect_apimock = {
    setUp: function(done) {
        // setup here if necessary
        done();
    },
    no_delay_simpleMockformat: function(test) {
        var starttime = new Date();
        test.expect(3);
        http.request({
            path: '/api2/hello',
            method: 'GET',
            port: 8080
        }, function(response) {
            var data = '';
            response.on('data', function(chunk) {
                data += chunk;
            });
            response.on('end', function() {
                var endtime = new Date();
                var executionTime = endtime.getTime() - starttime.getTime();
                test.equal(response.statusCode, 200);
                var expected = '{"id":"api"}';
                test.equal(data, expected, 'GET /api2/hello should return test/api/hello.json');
                test.equal(executionTime >= DELAY_TIME, false, 'The response should not be delayed');
                test.done();
            });
        }).end();
    },
    delayed_simpleMockformat: function(test) {
        var starttime = new Date();
        test.expect(3);
        http.request({
            path: '/apiX/hello',
            method: 'GET',
            port: 8080
        }, function(response) {
            var data = '';
            response.on('data', function(chunk) {
                data += chunk;
            });
            response.on('end', function() {
                var endtime = new Date();
                var executionTime = endtime.getTime() - starttime.getTime();
                test.equal(response.statusCode, 200);
                var expected = '{"id":"apiX"}';
                test.equal(data, expected, 'GET /apiX/hello should return test/apiX/hello.json');
                test.equal(executionTime >= DELAY_TIME, true, 'The response should be delayed');
                test.done();
            });
        }).end();
    },
    no_delay_advancedMockformat: function(test) {
        var starttime = new Date();
        test.expect(3);
        http.request({
            path: '/api2/helloAdv',
            method: 'GET',
            port: 8080
        }, function(response) {
            var data = '';
            response.on('data', function(chunk) {
                data += chunk;
            });
            response.on('end', function() {
                var endtime = new Date();
                var executionTime = endtime.getTime() - starttime.getTime();
                test.equal(response.statusCode, 200);
                var expected = '{"id":"api"}';
                test.equal(data, expected, 'GET /api2/helloAdv should return test/api/helloAdv.json');
                test.equal(executionTime >= DELAY_TIME, false, 'The response should not be delayed');
                test.done();
            });
        }).end();
    },
    delayed_advancedMockformat: function(test) {
        var starttime = new Date();
        test.expect(3);
        http.request({
            path: '/apiX/helloAdv',
            method: 'GET',
            port: 8080
        }, function(response) {
            var data = '';
            response.on('data', function(chunk) {
                data += chunk;
            });
            response.on('end', function() {
                var endtime = new Date();
                var executionTime = endtime.getTime() - starttime.getTime();
                test.equal(response.statusCode, 200);
                var expected = '{"id":"apiX"}';
                test.equal(data, expected, 'GET /apiX/helloAdv should return test/apiX/helloAdv.json');
                test.equal(executionTime >= DELAY_TIME, true, 'The response should be delayed');
                test.done();
            });
        }).end();
    }

};
